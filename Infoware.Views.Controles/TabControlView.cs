using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Windows.Forms;
using Infoware.Views.Attributes;
using Infoware.Views.Enums;

namespace Infoware.Views.Controles
{
    public class TabControlView : TabControl
    {
        public string TitleText { get; set; } = "";

        private const int labelWidth = 200;
        private const int columnWidth = 600;
        private string dataMember = string.Empty;
        private object dataSource;
        private bool is_binding = false;
        static object DataSourceChangedEvent = new object();
        static object DataMemberChangedEvent = new object();
        static object DataBindingCompleteEvent = new object();

        private List<ShowAsAttribute> attributes = new();
        private bool _readonly = false;

        [DefaultValue("")]
        public string DataMember
        {
            get { return dataMember; }
            set
            {
                if (dataMember != value)
                {
                    dataMember = value;
                    if (BindingContext != null)
                        ReBind();
                    OnDataMemberChanged(EventArgs.Empty);
                }
            }
        }
        public object DataSource
        {
            get => dataSource;
            set
            {
                if (!(value == null || value is IList || value is IListSource || value is IBindingList || value is IBindingListView))
                    throw new NotSupportedException("Type cannot be bound.");

                if (value != DataSource)
                {
                    if (IsHandleCreated && value != null && BindingContext != null && BindingContext[value] != null)
                        DataMember = String.Empty;
                    ClearBinding();


                    // Do not set dataSource prior to the BindingContext check because there is some lazy initialization 
                    // code which might result in double call to ReBind here and in OnBindingContextChanged
                    if (BindingContext != null)
                    {
                        dataSource = value;
                        ReBind();
                    }
                    else
                    {
                        dataSource = value;
                    }

                    OnDataSourceChanged(EventArgs.Empty);
                }
            }
        }

        private void ClearBinding()
        {
            if (DataManager != null)
            {
                //DataManager.ListChanged -= OnListChanged;
                //DataManager.PositionChanged -= OnListPositionChanged;
                //columns.ClearAutoGeneratedColumns();
                //rows.Clear();
            }
        }
        private void ReBind()
        {
            if (!is_binding)
            {
                SuspendLayout();

                is_binding = true;
                ClearBinding();
                DoBinding();
                is_binding = false;

                ResumeLayout(true);
                Invalidate();
            }
        }
        internal CurrencyManager DataManager
        {
            get
            {
                if (DataSource != null && BindingContext != null)
                {
                    string dataMember = DataMember;
                    if (dataMember == null)
                        dataMember = String.Empty;
                    return (CurrencyManager)this.BindingContext[DataSource, dataMember];
                }
                return null;
            }
        }

        public bool Readonly
        {
            get => _readonly; 
            internal set
            {
                bool mustUpdate = _readonly != value;
                _readonly = value;
                if (mustUpdate)
                {
                    RefreshColumns();
                }

                //foreach (TabPage tab in TabPages)
                //{
                //    tab.Controls[0].Enabled = !_readonly;
                //}
            }
        }

        public Dictionary<string, Func<string, MaintenanceViewBase>> ControlsFunctions { get; internal set; }

        private void DoBinding()
        {
            if (dataSource != null && DataManager != null && ((IList)DataSource).Count > 0 && !DesignMode)
            {
                try
                {
                    attributes = Utils.GetProperties((IList)DataSource, x => x.ShowInEdition);
                    RefreshColumns();
                }
                catch (Exception ex)
                {
                    throw;
                }

                //DataManager.ListChanged += OnListChanged;
                //DataManager.PositionChanged += OnListPositionChanged;
                OnDataBindingComplete(new DataGridViewBindingCompleteEventArgs(ListChangedType.Reset));
                //OnListPositionChanged(this, EventArgs.Empty);
            }
            else
            {
                TabPages.Clear();
            }
        }

        public event EventHandler<BindingSource> OnOpenRecord;
        public event EventHandler<BindingSource> OnAddNewItemList;
        public event EventHandler<ShowAsAttribute> OnLinkClicked;
        protected virtual void OnDataBindingComplete(DataGridViewBindingCompleteEventArgs e)
        {
            DataGridViewBindingCompleteEventHandler eh = (DataGridViewBindingCompleteEventHandler)(Events[DataBindingCompleteEvent]);
            if (eh != null)
                eh(this, e);
        }
        protected virtual void OnDataSourceChanged(EventArgs e)
        {
            EventHandler eh = (EventHandler)(Events[DataSourceChangedEvent]);
            if (eh != null)
                eh(this, e);
        }
        protected virtual void OnDataMemberChanged(EventArgs e)
        {
            EventHandler eh = (EventHandler)(Events[DataMemberChangedEvent]);
            if (eh != null)
                eh(this, e);
        }
        protected override void OnBindingContextChanged(EventArgs e)
        {
            base.OnBindingContextChanged(e);
            ReBind();
        }
        public event EventHandler DataSourceChanged
        {
            add { Events.AddHandler(DataSourceChangedEvent, value); }
            remove { Events.RemoveHandler(DataSourceChangedEvent, value); }
        }

        private void RefreshColumns()
        {
            TabPages.Clear();
            var sortByCategories = attributes.OrderBy(x => x.Category).ToList();
            string category = null;
            TabPage tabPage = null;
            FlowLayoutPanel panel = null;
            foreach (var attr in sortByCategories)
            {
                ShowAsAttribute updateField = null;
                bool isUpdateFieldEnable = false;
                if (!string.IsNullOrWhiteSpace(attr.UpdateField))
                {
                    updateField = sortByCategories.Where(x => x.PropertyInfo.Name.Equals(attr.UpdateField, StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();
                    if (updateField is null)
                    {
                        throw new Exception($"Field {attr.PropertyInfo.Name} cannot find the update field {attr.UpdateField}");
                    }
                    isUpdateFieldEnable = (!Readonly) && updateField.PropertyInfo.CanWrite;
                }
                bool isEnable = (!Readonly) && attr.PropertyInfo.CanWrite;
                if (attr.Category != category)
                {
                    category = attr.Category;
                    tabPage = new TabPage()
                    {
                        Text = attr.Category == ShowAsAttribute.GeneralName ? TitleText ?? attr.Category : attr.Category
                    };
                    panel = new FlowLayoutPanel()
                    {
                        Dock = DockStyle.Fill,
                        FlowDirection = FlowDirection.TopDown,
                    };
                    tabPage.Controls.Add(panel);
                    TabPages.Add(tabPage);
                }
                if (attr.Control == EnumControls.None)
                {

                }
                else if (attr.Control == EnumControls.Link)
                {
                    LinkLabel link = new()
                    {
                        Text = attr.Label,
                        Tag = attr,
                        Width = labelWidth,
                        Enabled = isUpdateFieldEnable,
                        TabStop = isUpdateFieldEnable
                    };
                    link.Click += Link_Click;
                    TextBox textBox = new()
                    {
                        Tag = attr,
                        Width = attr.Size * 10,
                        ReadOnly = isEnable,
                        TabStop = isEnable
                    };
                    textBox.DataBindings.Add(new Binding(nameof(TextBox.Text), dataSource, attr.PropertyInfo.Name, false, DataSourceUpdateMode.OnPropertyChanged));

                    CreatePanelControl(panel, null, new Control[] { link, textBox }, 30);
                }
                else if (attr.Control == EnumControls.List)
                {
                    var control = ControlsFunctions?.GetValueOrDefault(attr.PropertyInfo.Name)?.Invoke(attr.Label);
                    if (control is null)
                    {
                        throw new Exception($"Mantenimiento de {attr.PropertyInfo.Name} no fue declarado");
                    }
                    control.Size = new(columnWidth, 600);
                    control.OnPreparingAddingNewRecord += Control_OnPreparingAddingNewRecord;

                    control.DataBindings.Add(new(nameof(MaintenanceViewBase.Data), dataSource, attr.PropertyInfo.Name));
                    //control.DataBindings.Add(new(nameof(MaintenanceViewBase.Parent), dataSource, "this"));
                    panel.Controls.Add(control);

                    //BindingSource newBindingSource = new(dataSource, attr.Field);
                    //Button button = new()
                    //{
                    //    Text = "Add",
                    //    Tag = newBindingSource
                    //};
                    //button.Click += ButtonAddItemList_Click;
                    //DataGridViewView dataGrid = new()
                    //{
                    //    Tag = attr,
                    //    DataSource = newBindingSource,
                    //    ReadOnly = _readonly
                    //};
                    //dataGrid.CellDoubleClick += Column2_CellDoubleClick;
                    //panel.Controls.AddRange(new Control[] { button, dataGrid });
                }
                //else if (attr.Control == EnumControls.ComboBox)
                //{
                //    if (attr.UpdateField is null)
                //    {
                //        throw new Exception($"UpdateField property in ComboBox is missing");
                //    }
                //    IFormBaseGUI form = (IFormBaseGUI)TopLevelControl ?? throw new ArgumentNullException(nameof(IFormBaseGUI));
                //    form.Sources.TryGetValue(attr.Field, out object result);
                //    if (result is null)
                //    {
                //        throw new Exception($"No source for combobox {attr.Field}");
                //    }

                //    var sourceAttrs = Utils.GetProperties((IList)result);
                //    string displayMember = sourceAttrs.FirstOrDefault(x => x.IsDefaultValue)?.Field;
                //    string valueMember = sourceAttrs.FirstOrDefault(x => x.IsDefaultId)?.Field;

                //    ComboBox comboBox = new()
                //    {
                //        DropDownStyle = ComboBoxStyle.DropDownList,
                //        DataSource = result,
                //        DisplayMember = displayMember,
                //        ValueMember = valueMember,
                //        Tag = attr,
                //    };
                //    comboBox.DataBindings.Add(new Binding(nameof(comboBox.SelectedValue), dataSource, attr.UpdateField));
                //    comboBox.DataBindings.Add(new Binding(nameof(comboBox.SelectedItem), dataSource, attr.Field));
                //    panel.Controls.Add(CreatePanelControl(attr, comboBox));
                //}
                else if (attr.PropertyInfo.PropertyType.IsEnum)
                {
                    List<KeyValuePair<object, string>> items = Utils.EnumToComboData(attr);
                    List<Control> controls = new();
                    ComboBox comboBox = new()
                    {
                        DropDownStyle = ComboBoxStyle.DropDownList,
                        ValueMember = "Key",
                        DisplayMember = "Value",
                        DataSource = items,
                        Tag = attr,
                        Width = attr.Size * 10,
                        Enabled = isEnable,
                        TabStop = isEnable
                    };
                    comboBox.DataBindings.Add(new Binding(nameof(comboBox.SelectedValue), dataSource, attr.PropertyInfo.Name, false, DataSourceUpdateMode.OnPropertyChanged));
                    controls.Add(comboBox);
                    CreatePanelControl(panel, attr, controls.ToArray(), 33);
                }
                else if (attr.PropertyInfo.PropertyType.IsNullableEnum())
                {
                    List<KeyValuePair<int, string>> items = Utils.EnumToComboDataInt(attr);
                    List<Control> controls = new();
                    ComboBox comboBox = new()
                    {
                        DropDownStyle = ComboBoxStyle.DropDownList,
                        ValueMember = "Key",
                        DisplayMember = "Value",
                        DataSource = items,
                        Tag = attr,
                        Width = attr.Size * 10,
                        Enabled = isUpdateFieldEnable,
                        TabStop = isUpdateFieldEnable
                    };
                    Binding binding = new(nameof(comboBox.SelectedValue), dataSource, attr.UpdateField, false, DataSourceUpdateMode.OnPropertyChanged);
                    comboBox.DataBindings.Add(binding);
                    controls.Add(comboBox);
                    CreatePanelControl(panel, attr, controls.ToArray(), 33);
                }
                else if (attr.PropertyInfo.PropertyType.Equals(typeof(bool)))
                {
                    CheckBox checkBox = new()
                    {
                        Text = attr.Label,
                        Tag = attr,
                        Width = attr.Size * 10,
                        Enabled = isEnable,
                        TabStop = isEnable
                    };
                    Binding binding = new(nameof(CheckBox.Checked), dataSource, attr.PropertyInfo.Name, false, DataSourceUpdateMode.OnPropertyChanged);
                    checkBox.DataBindings.Add(binding);
                    panel.Controls.Add(checkBox);
                }
                else
                {
                    TextBox textBox = new()
                    {
                        Tag = attr,
                        Width = attr.Size * 10,
                        ReadOnly = !isEnable,
                        TabStop = isEnable
                    };
                    textBox.DataBindings.Add(new Binding(nameof(TextBox.Text), dataSource, attr.PropertyInfo.Name, false, DataSourceUpdateMode.OnPropertyChanged));

                    CreatePanelControl(panel, attr, textBox, 30);
                }
            }
        }

        private void Control_OnPreparingAddingNewRecord(object sender, EventArgs e)
        {
            ((MaintenanceViewBase)sender).ParentObject = ((BindingSource)dataSource).Current;
        }

        private void Link_Click(object sender, EventArgs e)
        {
            OnLinkClicked?.Invoke(sender, (ShowAsAttribute)((LinkLabel)sender).Tag);
            this.SelectNextControl((Control)sender, true, true, true, true);
        }

        public static void CreatePanelControl(FlowLayoutPanel panel, ShowAsAttribute attr, Control control, int height)
        {
            CreatePanelControl(panel, attr, new Control[] { control }, height);
        }
            
        public static void CreatePanelControl(
            FlowLayoutPanel pnlTab, ShowAsAttribute attrLabel, Control[] controls, int height)
        {
            FlowLayoutPanel pnlControl = new()
            {
                FlowDirection = FlowDirection.LeftToRight,
                Width = columnWidth,
                AutoSize = true,
            };
            if (attrLabel != null)
            {
                pnlControl.Controls.Add(
                    new Label()
                    {
                        Text = attrLabel.Label,
                        Width = labelWidth
                    }
                );
            }
            pnlControl.Controls.AddRange(controls);
            pnlTab.Controls.Add(pnlControl);
        }

        private void ButtonAddItemList_Click(object sender, EventArgs e)
        {
            OnAddNewItemList?.Invoke(this, (BindingSource)((Button)sender).Tag);
        }

        private void Column2_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            OnOpenRecord?.Invoke(this, (BindingSource)((DataGridViewView)sender).DataSource);
        }

        public TabControlView()
        {
            TabPages.Clear();
        }


    }
}
